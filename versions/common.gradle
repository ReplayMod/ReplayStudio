apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'license'
apply plugin: 'maven'
apply plugin: 'ch.raffael.preshadow'
apply plugin: 'de.johni0702.reproducible-builds'
apply plugin: 'io.spring.dependency-management'

dependencyManagement {
  imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
        mavenBom 'org.apache.logging.log4j:log4j-bom:2.8.1'    

  }
}

def gitCommitHash() {
    try {
        def out = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = out
        }
        return out.toString().trim()
    } catch (e) {
        return "unknown"
    }
}

group = 'com.replaymod.replaystudio'
description = 'ReplayStudio'
version = gitCommitHash()
mainClassName = 'com.replaymod.replaystudio.launcher.Launcher'

ext.projectName = 'ReplayStudio'
ext.packaging = 'jar'
ext.author = 'johni0702'
ext.authorUrl = 'https://github.com/johni0702'
ext.inceptionYear = '2016'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def mcVersion
if (project.name != 'core') {
    def (major, minor, patch) = project.name.tokenize('.')
    mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int
} else {
    def f = file('mcVersion')
    mcVersion = f.exists() ? f.readLines().first() as int : 11202
}

compileJava {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url 'https://repo.viaversion.com'
    }
    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url 'https://jitpack.io'
    }
}

configurations.preshadow.resolutionStrategy.eachDependency { dep ->
    def req = dep.requested
    if (req.group == 'com.github.steveice10' && req.name == 'opennbt' && req.version == '1.0') {
        // Need to use commit hash because there's a conflicting version in maven central
        // This might still get the wrong sources artifact but we don't care about that
        dep.useVersion '659bda0'
    }
}

dependencies {
    preshadow group: 'com.github.ReplayMod', name: 'MCProtocolLib', version: [
        11202: '86fa11a',
        11201: 'ef8c9f5',
        11200: 'c47b8ca',
        11102: '673be0a',
        11100: 'e70dc3e',
        11002: '675520e',
        10904: '5b7c728',
        10800: 'b5dcc87',
        10710: '2ac83bf',
    ][mcVersion]

    def viaversion = 'com.github.replaymod.viaversion:viaversion:563dc3c'
    preshadow(viaversion){
        transitive = false // 'provided' dependencies, manually added below
    }
    compile 'com.google.guava:guava:17.0' // for ViaVersion
    // ViaVersion will use the relocated netty of MCProtocolLib

    // un-shaded from MCAuthLib (is shaded into MCProtocolLib) and ViaVersion (has gson shaded with relocation)
    // see configuration of preshadowJar task
    compile 'com.google.code.gson:gson:2.3.1'

    compile  'com.amazonaws:aws-java-sdk-kinesis:1.11.228' 
    compile 'org.apache.logging.log4j:log4j-api'
    compile 'org.apache.logging.log4j:log4j-core'

    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.commons:commons-collections4:4.0'
    compile 'commons-cli:commons-cli:1.2'
    compile "org.projectlombok:lombok:1.16.6"
    testCompile 'junit:junit:4.11'
    testCompile 'com.google.guava:guava-testlib:18.0'
    testCompile 'pl.pragmatists:JUnitParams:1.0.4'
}

license {
    ext.name = project.projectName
    ext.author = project.author
    ext.url = project.authorUrl
    ext.year = project.inceptionYear
    header project.parent.file('HEADER.txt')
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
    exclude 'LICENSE.txt'
    exclude 'META-INF/*'
}

preshadowJar {
    if (mcVersion < 10904) {
        relocate 'org.spacehq.mc.protocol.data.game.values', 'com.github.steveice10.mc.protocol.data.game'
    }
    if (mcVersion < 11200) {
        relocate 'org.spacehq', 'com.github.steveice10'
    }
    relocate 'io.netty', 'com.github.steveice10.netty'
    relocate 'us.myles.ViaVersion', 'com.replaymod.replaystudio.us.myles.ViaVersion'

    // un-shading from MCAuthLib (see dependencies)
    exclude 'com/google/gson/**'
    // also un-shading (and un-relocating) from ViaVersion
    exclude 'us/myles/viaversion/libs/gson/**'
    relocate 'us.myles.viaversion.libs.gson', 'com.google.gson'
}

shadowJar {
    archiveName = "${baseName}-${version}.full.${extension}"
    append('META-INF/NOTICE.txt')
    from(tasks.findByName('preshadowJar').outputs.files.collect {it.isDirectory() ? it : zipTree(it)})
}
build.dependsOn shadowJar

jar.manifest.mainAttributes(
        'Main-Class': mainClassName,
        'Implementation-Title': description,
        'Implementation-Version': gitCommitHash()
)

if (project.name != 'core') {
    apply from: '../preprocessor.gradle'

    def preprocessedSrc = 'build/preprocessed/src'
    def preprocessedRes = 'build/preprocessed/res'
    def preprocessedTestSrc = 'build/preprocessed/test'
    def originalSrc = '../../src/main/java'
    def originalRes = '../../src/main/resources'
    def originalTestSrc = '../../src/test/java'
    def vars = [MC: mcVersion]

    sourceSets {
        main.java.srcDir preprocessedSrc
        main.resources.srcDir preprocessedRes
        test.java.srcDir preprocessedTestSrc
    }

    task preprocessJava {
        inputs.dir(originalSrc)
        outputs.dir(preprocessedSrc)
        doLast {
            project.convertTree(vars, originalSrc, preprocessedSrc)
        }
    }

    task preprocessResources {
        inputs.dir(originalRes)
        outputs.dir(preprocessedRes)
        doLast {
            project.convertTree(vars, originalRes, preprocessedRes)
        }
    }

    task preprocessTestJava {
        inputs.dir(originalTestSrc)
        outputs.dir(preprocessedTestSrc)
        doLast {
            project.convertTree(vars, originalTestSrc, preprocessedTestSrc)
        }
    }

    compileJava.dependsOn preprocessJava
    processResources.dependsOn preprocessResources
    compileTestJava.dependsOn preprocessTestJava
} else {
    sourceSets {
        main.java.srcDirs = ['../../src/main/java']
        main.resources.srcDirs = ['../../src/main/resources']
        test.java.srcDirs = ['../../src/test/java']
    }
}
